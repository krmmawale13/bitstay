// apps/backend/prisma/schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/////////////////////// ENUMS ///////////////////////
enum RoleEnum {
  ADMIN
  MANAGER
  RECEPTIONIST
  CASHIER
  WAITER
  HOUSEKEEPING
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

enum PaymentModeEnum {
  CASH
  CARD
  UPI
  NETBANKING
  OTHER
}

enum TaxTypeEnum {
  GST
  VAT
  NONE
}

enum InvoiceStatus {
  DRAFT
  PAID
  PARTIAL
  CANCELLED
}

/////////////////////// CORE / TENANT MANAGEMENT ///////////////////////
model Tenant {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  gstin     String?  @db.VarChar(15)
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users            User[]
  roles            Role[]
  auditLogs        AuditLog[]
  approvals        Approval[]
  metadataVersions MetadataVersion[]
  notifications    Notification[]
  scheduledReports ScheduledReport[]
  fileStorage      FileStorage[]
  hotels           Hotel[]
  bars             Bar[]
  suppliers        Supplier[]
  purchaseOrders   PurchaseOrder[]
  invoices         Invoice[]
  supplierInvoices SupplierInvoice[]
  inventoryItems   InventoryItem[]

  // Added inverses that were missing
  customers Customer[]
  bookings  Booking[]
  posTables PosTable[]
  posOrders PosOrder[]
  rooms     Room[]

  @@map("tbl_tenants")
}

model User {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  name      String
  email     String   @unique
  password  String
  role      RoleEnum
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  auditLogs AuditLog[]
  approvals Approval[] // inverse handled by Approval.requestBy -> requester

  @@map("tbl_users")
}

model Role {
  id          Int      @id @default(autoincrement())
  tenantId    Int?
  name        String
  description String?
  createdAt   DateTime @default(now())

  tenant          Tenant?          @relation(fields: [tenantId], references: [id])
  rolePermissions RolePermission[]

  @@map("tbl_roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())

  rolePermissions RolePermission[]

  @@map("tbl_permissions")
}

model RolePermission {
  id           Int      @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime @default(now())

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@map("tbl_role_permissions")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  userId    Int?
  action    String
  details   String?
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  @@map("tbl_audit_logs")
}

model Approval {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  module    String
  recordId  Int
  status    String
  requestBy Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant @relation(fields: [tenantId], references: [id])
  requester User   @relation(fields: [requestBy], references: [id]) // inverse: User.approvals

  @@map("tbl_approvals")
}

/////////////////////// METADATA (GLOBAL / SHARED) ///////////////////////
model State {
  id        Int        @id @default(autoincrement())
  name      String
  districts District[]

  // inverse to CustomerAddress.state
  addresses CustomerAddress[]

  @@map("tbl_states")
}

model District {
  id      Int    @id @default(autoincrement())
  stateId Int
  name    String

  state State @relation(fields: [stateId], references: [id])

  // inverse to CustomerAddress.district
  addresses CustomerAddress[]

  @@map("tbl_districts")
}

model IdType {
  id   Int    @id @default(autoincrement())
  name String

  // inverses
  customers     Customer[]
  bookingGuests BookingGuest[]

  @@map("tbl_id_types")
}

model TaxGroup {
  id   Int     @id @default(autoincrement())
  name String
  rate Decimal @db.Decimal(5, 2)

  @@map("tbl_tax_groups")
}

model HsnSacCode {
  id   Int     @id @default(autoincrement())
  code String
  desc String?

  // inverse
  hsnTaxSummaries HsnTaxSummary[]

  @@map("tbl_hsn_sac_codes")
}

model RoomType {
  id   Int    @id @default(autoincrement())
  name String

  // inverse
  rooms Room[]

  @@map("tbl_room_types")
}

model BookingSource {
  id   Int    @id @default(autoincrement())
  name String

  // inverse
  bookings Booking[]

  @@map("tbl_booking_sources")
}

model PaymentMode {
  id   Int    @id @default(autoincrement())
  mode String

  // inverse: booking payments that point to this model
  bookingPayments BookingPayment[]

  @@map("tbl_payment_modes")
}

model DocumentType {
  id   Int    @id @default(autoincrement())
  name String

  @@map("tbl_document_types")
}

model UnitType {
  id   Int    @id @default(autoincrement())
  name String

  // inverse
  inventoryItems InventoryItem[]

  @@map("tbl_unit_types")
}

model LiquorCategory {
  id     Int           @id @default(autoincrement())
  name   String
  brands LiquorBrand[]

  @@map("tbl_liquor_categories")
}

model LiquorBrand {
  id         Int      @id @default(autoincrement())
  name       String
  categoryId Int
  createdAt  DateTime @default(now())

  category LiquorCategory @relation(fields: [categoryId], references: [id])

  @@map("tbl_liquor_brands")
}

model MenuCategory {
  id    Int        @id @default(autoincrement())
  name  String
  items MenuItem[]

  @@map("tbl_menu_categories")
}

/////////////////////// CUSTOMERS & BOOKING ///////////////////////
model Customer {
  id          Int       @id @default(autoincrement())
  tenantId    Int
  name        String
  phone       String?
  email       String?   @unique
  idTypeId    Int?
  idNumber    String?
  dob         DateTime?
  gender      String?
  nationality String?
  consent     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant    Tenant            @relation(fields: [tenantId], references: [id])
  idType    IdType?           @relation(fields: [idTypeId], references: [id])
  addresses CustomerAddress[]
  bookings  Booking[]
  invoices  Invoice[] // inverse for Invoice.customer

  @@map("tbl_customers")
}

model CustomerAddress {
  id         Int     @id @default(autoincrement())
  customerId Int
  line1      String
  line2      String?
  city       String?
  stateId    Int?
  districtId Int?
  pincode    String?

  customer Customer  @relation(fields: [customerId], references: [id])
  state    State?    @relation(fields: [stateId], references: [id])
  district District? @relation(fields: [districtId], references: [id])

  @@map("tbl_customer_addresses")
}

model Booking {
  id         Int           @id @default(autoincrement())
  tenantId   Int
  customerId Int
  sourceId   Int?
  checkIn    DateTime
  checkOut   DateTime
  status     BookingStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  tenant                Tenant                  @relation(fields: [tenantId], references: [id])
  customer              Customer                @relation(fields: [customerId], references: [id])
  source                BookingSource?          @relation(fields: [sourceId], references: [id])
  rooms                 BookingRoom[]
  payments              BookingPayment[]
  guests                BookingGuest[]
  roomAllocationHistory RoomAllocationHistory[] // inverse for RoomAllocationHistory.booking

  @@map("tbl_bookings")
}

model BookingRoom {
  id        Int @id @default(autoincrement())
  bookingId Int
  roomId    Int

  booking Booking @relation(fields: [bookingId], references: [id])
  room    Room    @relation(fields: [roomId], references: [id])

  @@map("tbl_booking_rooms")
}

model BookingPayment {
  id        Int      @id @default(autoincrement())
  bookingId Int
  amount    Decimal  @db.Decimal(10, 2)
  modeId    Int?
  createdAt DateTime @default(now())

  booking Booking      @relation(fields: [bookingId], references: [id])
  mode    PaymentMode? @relation(fields: [modeId], references: [id])

  @@map("tbl_booking_payments")
}

model BookingGuest {
  id        Int      @id @default(autoincrement())
  bookingId Int
  name      String
  idTypeId  Int?
  idNumber  String?
  createdAt DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id])
  idType  IdType? @relation(fields: [idTypeId], references: [id])

  @@map("tbl_booking_guests")
}

model RoomAllocationHistory {
  id        Int      @id @default(autoincrement())
  bookingId Int
  oldRoomId Int?
  newRoomId Int?
  changedAt DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("tbl_room_allocation_history")
}

/////////////////////// HOTEL / ROOMS ///////////////////////
model Hotel {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  name      String
  address   String?
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
  rooms  Room[]

  @@map("tbl_hotels")
}

model Room {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  hotelId   Int
  number    String
  typeId    Int?
  status    String
  rate      Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant      Tenant            @relation(fields: [tenantId], references: [id])
  hotel       Hotel             @relation(fields: [hotelId], references: [id])
  type        RoomType?         @relation(fields: [typeId], references: [id])
  images      RoomImage[]
  maintenance RoomMaintenance[]
  bookings    BookingRoom[]
  posOrders   PosOrder[]

  @@map("tbl_rooms")
}

model RoomImage {
  id        Int      @id @default(autoincrement())
  roomId    Int
  url       String
  createdAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id])

  @@map("tbl_room_images")
}

model RoomMaintenance {
  id        Int      @id @default(autoincrement())
  roomId    Int
  note      String
  createdAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id])

  @@map("tbl_room_maintenance")
}

/////////////////////// BAR / POS ///////////////////////
model Bar {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  name      String
  location  String?
  createdAt DateTime @default(now())

  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  posTables PosTable[]
  orders    PosOrder[]

  @@map("tbl_bars")
}

model PosTable {
  id       Int    @id @default(autoincrement())
  tenantId Int
  barId    Int? // added so Bar.posTables has opposite
  name     String

  tenant Tenant     @relation(fields: [tenantId], references: [id])
  bar    Bar?       @relation(fields: [barId], references: [id])
  orders PosOrder[]

  @@map("tbl_pos_tables")
}

model PosOrder {
  id          Int             @id @default(autoincrement())
  tenantId    Int
  barId       Int? // added so Bar.orders has opposite
  orderNumber String          @unique
  tableId     Int?
  roomId      Int?
  totalAmount Decimal         @db.Decimal(10, 2)
  paymentMode PaymentModeEnum
  createdAt   DateTime        @default(now())

  tenant     Tenant         @relation(fields: [tenantId], references: [id])
  bar        Bar?           @relation(fields: [barId], references: [id])
  table      PosTable?      @relation(fields: [tableId], references: [id])
  room       Room?          @relation(fields: [roomId], references: [id])
  items      PosOrderItem[]
  kotTickets KotTicket[]

  @@map("tbl_pos_orders")
}

model PosOrderItem {
  id         Int     @id @default(autoincrement())
  orderId    Int
  menuItemId Int
  qty        Int
  price      Decimal @db.Decimal(10, 2)

  order    PosOrder @relation(fields: [orderId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("tbl_pos_order_items")
}

model MenuItem {
  id          Int      @id @default(autoincrement())
  categoryId  Int
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())

  category MenuCategory       @relation(fields: [categoryId], references: [id])
  metadata MenuItemMetadata[]
  posItems PosOrderItem[]

  @@map("tbl_menu_items")
}

model MenuItemMetadata {
  id         Int    @id @default(autoincrement())
  menuItemId Int
  key        String
  value      String

  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("tbl_menu_item_metadata")
}

model KotTicket {
  id        Int      @id @default(autoincrement())
  orderId   Int
  note      String?
  createdAt DateTime @default(now())

  order PosOrder @relation(fields: [orderId], references: [id])

  @@map("tbl_kot_tickets")
}

/////////////////////// SUPPLIERS & PURCHASE ///////////////////////
model Supplier {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  name      String
  gstNumber String?
  contact   String?
  email     String?
  address   String?
  createdAt DateTime @default(now())

  tenant           Tenant            @relation(fields: [tenantId], references: [id])
  purchaseOrders   PurchaseOrder[]
  supplierInvoices SupplierInvoice[]

  @@map("tbl_suppliers")
}

model PurchaseOrder {
  id          Int      @id @default(autoincrement())
  tenantId    Int
  supplierId  Int
  orderDate   DateTime
  status      String
  totalAmount Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id])
  supplier      Supplier            @relation(fields: [supplierId], references: [id])
  items         PurchaseOrderItem[]
  goodsReceipts GoodsReceipt[]

  @@map("tbl_purchase_orders")
}

model PurchaseOrderItem {
  id        Int     @id @default(autoincrement())
  poId      Int
  itemId    Int
  qty       Int
  unitPrice Decimal @db.Decimal(10, 2)

  po   PurchaseOrder @relation(fields: [poId], references: [id])
  item InventoryItem @relation(fields: [itemId], references: [id])

  @@map("tbl_purchase_order_items")
}

model GoodsReceipt {
  id        Int      @id @default(autoincrement())
  poId      Int
  note      String?
  createdAt DateTime @default(now())

  po PurchaseOrder @relation(fields: [poId], references: [id])

  @@map("tbl_goods_receipts")
}

model SupplierInvoice {
  id          Int      @id @default(autoincrement())
  tenantId    Int
  supplierId  Int
  invoiceNo   String
  invoiceDate DateTime
  totalAmount Decimal  @db.Decimal(12, 2)
  createdAt   DateTime @default(now())

  tenant     Tenant                @relation(fields: [tenantId], references: [id])
  supplier   Supplier              @relation(fields: [supplierId], references: [id])
  gstEntries GstPurchaseRegister[]

  @@map("tbl_supplier_invoices")
}

/////////////////////// INVENTORY / STOCK ///////////////////////
model InventoryItem {
  id         Int      @id @default(autoincrement())
  tenantId   Int
  name       String
  sku        String?
  unitTypeId Int?
  createdAt  DateTime @default(now())

  tenant        Tenant              @relation(fields: [tenantId], references: [id])
  unitType      UnitType?           @relation(fields: [unitTypeId], references: [id])
  batches       InventoryBatch[]
  stockMoves    StockRegister[]
  adjustments   StockAdjustment[]
  purchaseItems PurchaseOrderItem[]
  invoiceItems  InvoiceItem[]
  bottlings     BottlingRecord[]

  @@map("tbl_inventory_items")
}

model InventoryBatch {
  id        Int       @id @default(autoincrement())
  itemId    Int
  batchCode String?
  expiry    DateTime?
  mrp       Decimal   @db.Decimal(10, 2)

  item InventoryItem @relation(fields: [itemId], references: [id])

  @@map("tbl_inventory_batches")
}

model StockRegister {
  id        Int      @id @default(autoincrement())
  itemId    Int
  qty       Int
  note      String?
  createdAt DateTime @default(now())

  item InventoryItem @relation(fields: [itemId], references: [id])

  @@map("tbl_stock_register")
}

model StockAdjustment {
  id        Int      @id @default(autoincrement())
  itemId    Int
  type      String
  qty       Int
  note      String?
  createdAt DateTime @default(now())

  item InventoryItem @relation(fields: [itemId], references: [id])

  @@map("tbl_stock_adjustments")
}

model BottlingRecord {
  id        Int      @id @default(autoincrement())
  itemId    Int?
  note      String?
  createdAt DateTime @default(now())

  item InventoryItem? @relation(fields: [itemId], references: [id])

  @@map("tbl_bottling_records")
}

/////////////////////// SALES & BILLING ///////////////////////
model Invoice {
  id          Int             @id @default(autoincrement())
  tenantId    Int
  customerId  Int?
  invoiceNo   String          @unique
  status      InvoiceStatus   @default(DRAFT)
  totalAmount Decimal         @db.Decimal(12, 2)
  taxAmount   Decimal         @db.Decimal(12, 2)
  paymentMode PaymentModeEnum
  createdAt   DateTime        @default(now())

  tenant      Tenant             @relation(fields: [tenantId], references: [id])
  customer    Customer?          @relation(fields: [customerId], references: [id])
  items       InvoiceItem[]
  payments    Payment[]
  gstSales    GstSalesRegister[]
  creditNotes CreditNote[] // inverse for CreditNote.invoice

  @@map("tbl_invoices")
}

model InvoiceItem {
  id        Int      @id @default(autoincrement())
  invoiceId Int
  itemId    Int
  qty       Int
  price     Decimal  @db.Decimal(10, 2)
  taxRate   Decimal? @db.Decimal(5, 2)

  invoice Invoice       @relation(fields: [invoiceId], references: [id])
  item    InventoryItem @relation(fields: [itemId], references: [id])

  @@map("tbl_invoice_items")
}

model Payment {
  id        Int             @id @default(autoincrement())
  invoiceId Int
  amount    Decimal         @db.Decimal(12, 2)
  mode      PaymentModeEnum
  createdAt DateTime        @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("tbl_payments")
}

model CreditNote {
  id        Int      @id @default(autoincrement())
  invoiceId Int
  amount    Decimal  @db.Decimal(12, 2)
  reason    String?
  createdAt DateTime @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("tbl_credit_notes")
}

/////////////////////// COMPLIANCE & REPORTS ///////////////////////
model GstPurchaseRegister {
  id                Int      @id @default(autoincrement())
  supplierInvoiceId Int
  invoiceNo         String
  gstTaxable        Decimal  @db.Decimal(12, 2)
  gstAmount         Decimal  @db.Decimal(12, 2)
  createdAt         DateTime @default(now())

  supplierInvoice SupplierInvoice @relation(fields: [supplierInvoiceId], references: [id])

  @@map("tbl_gst_purchase_register")
}

model GstSalesRegister {
  id         Int      @id @default(autoincrement())
  invoiceId  Int
  invoiceNo  String
  gstTaxable Decimal  @db.Decimal(12, 2)
  gstAmount  Decimal  @db.Decimal(12, 2)
  createdAt  DateTime @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("tbl_gst_sales_register")
}

model HsnTaxSummary {
  id      Int     @id @default(autoincrement())
  hsnId   Int
  taxable Decimal @db.Decimal(12, 2)
  tax     Decimal @db.Decimal(12, 2)

  hsn HsnSacCode @relation(fields: [hsnId], references: [id])

  @@map("tbl_hsn_tax_summary")
}

model Gstr1Export {
  id        Int      @id @default(autoincrement())
  data      String? // store export payload (or link)
  createdAt DateTime @default(now())

  @@map("tbl_gstr1_export")
}

model Gstr2Export {
  id        Int      @id @default(autoincrement())
  data      String?
  createdAt DateTime @default(now())

  @@map("tbl_gstr2_export")
}

model ExciseDailyStock {
  id        Int      @id @default(autoincrement())
  note      String?
  createdAt DateTime @default(now())

  @@map("tbl_excise_daily_stock")
}

model ExciseBrandReport {
  id        Int      @id @default(autoincrement())
  note      String?
  createdAt DateTime @default(now())

  @@map("tbl_excise_brand_report")
}

model ExciseBreakageReport {
  id        Int      @id @default(autoincrement())
  note      String?
  createdAt DateTime @default(now())

  @@map("tbl_excise_breakage_report")
}

model ExciseTransportPass {
  id        Int      @id @default(autoincrement())
  note      String?
  createdAt DateTime @default(now())

  @@map("tbl_excise_transport_pass")
}

/////////////////////// SUPPORT / UTILITIES ///////////////////////
model Notification {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  title     String
  body      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("tbl_notifications")
}

model ScheduledReport {
  id        Int       @id @default(autoincrement())
  tenantId  Int
  name      String
  cron      String
  lastRunAt DateTime?
  createdAt DateTime  @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("tbl_scheduled_reports")
}

model MetadataVersion {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  version   String
  notes     String?
  createdAt DateTime @default(now())

  tenant   Tenant     @relation(fields: [tenantId], references: [id])
  metadata Metadata[]

  @@map("tbl_metadata_versions")
}

model Metadata {
  id        Int      @id @default(autoincrement())
  versionId Int
  type      String
  key       String
  value     String
  createdAt DateTime @default(now())

  version MetadataVersion @relation(fields: [versionId], references: [id])

  @@map("tbl_metadata")
}

model FileStorage {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  key       String
  url       String
  mimeType  String?
  size      Int?
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map("tbl_file_storage")
}

// --- ADDON MODELS START ---
model Amenity {
  id    Int    @id @default(autoincrement())
  name  String @unique
  icon  String?
  rooms RoomAmenity[]
}

model RoomAmenity {
  id         Int      @id @default(autoincrement())
  roomTypeId Int
  amenityId  Int
  roomType   RoomType @relation(fields: [roomTypeId], references: [id])
  amenity    Amenity  @relation(fields: [amenityId], references: [id])

  @@unique([roomTypeId, amenityId])
}

model SeasonalRate {
  id         Int      @id @default(autoincrement())
  roomTypeId Int
  startDate  DateTime
  endDate    DateTime
  rate       Decimal  @db.Decimal(10, 2)
  roomType   RoomType @relation(fields: [roomTypeId], references: [id])
}

model BookingCharge {
  id          Int      @id @default(autoincrement())
  bookingId   Int
  description String
  amount      Decimal  @db.Decimal(10, 2)
  taxAmount   Decimal  @db.Decimal(10, 2) @default(0.00)
  booking     Booking  @relation(fields: [bookingId], references: [id])
}

model PosOrderAddon {
  id               Int      @id @default(autoincrement())
  posOrderId       Int
  serviceChargePct Decimal  @db.Decimal(5, 2) @default(0.00)
  orderType        String   // e.g., "DINE_IN", "ROOM_SERVICE", "TAKEAWAY"
  posOrder         PosOrder @relation(fields: [posOrderId], references: [id])
}

model License {
  id         Int     @id @default(autoincrement())
  name       String
  expiryDate DateTime
  alerts     LicenseRenewalAlert[]
}

model LicenseRenewalAlert {
  id               Int     @id @default(autoincrement())
  licenseId        Int
  renewalAlertDays Int     @default(30)
  license          License @relation(fields: [licenseId], references: [id])
}
// --- ADDON MODELS END ---
```

//✅ This will remove the duplicate definition issue.

//As for **data safety**: if you only add models or relations that don’t drop existing columns/tables, your data will be safe. We’ll use `npx prisma migrate dev` after making sure the schema is valid.
